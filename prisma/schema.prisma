// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  name           String
  role           Role             @default(MEMBER) // Global role
  refreshToken   String?
  createdAt      DateTime         @default(now())

  // Relations
  ownedProjects  Project[]        @relation("OwnedProjects")
  assignedTasks  Task[]           @relation("AssignedTasks")
  memberships    ProjectMember[]
  comments       TaskComment[]
}

model Project {
  id          String           @id @default(uuid())
  name        String
  description String?
  ownerId     String
  startDate   DateTime?
  deadline    DateTime?
  createdAt   DateTime         @default(now())

  // Relations
  owner       User             @relation("OwnedProjects", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      Role     @default(MEMBER)

  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // Avoid duplicates
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  priority    TaskPriority
  status      TaskStatus     @default(TODO)
  dueDate     DateTime

  projectId   String
  assigneeId  String?

  // Relations
  project     Project        @relation(fields: [projectId], references: [id])
  assignee    User?          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  comments    TaskComment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
}

model TaskComment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  taskId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
}